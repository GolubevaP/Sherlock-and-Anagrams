#include <bits/stdc++.h>

using namespace std;

// Complete the sherlockAndAnagrams function below.
int sherlockAndAnagrams(string s)
{
	// количество неупорядоченных анаграммных пар подстрок
	int total = 0;

	// размер строки s
	int s_size = s.size();

	// для всех непустых подстрок всех возможных размеров count
	// (размеры: меньше размера строки s, но больше 0) проверим:
	for (size_t count = 1; count < s_size; ++count)
	{
		// определяем подстроку "эталонную" (с ней будем сравнивать остальные)
		// начиная с первого символа строки s
		// (s_size - count) - символ, следующий за последним, от которого возьмем "эталонную" подстроку
		// там начинается предпоследняя подстрока (размера count) строки s (размером s_size)
		// последнюю не берем в "эталон", так как ее сравним со всеми "эталонными" и так
		for (int i = 0; i < (s_size - count); ++i)
		{
			// массив символов для "эталонной" подстроки
			char arr1[count];
			s.copy(arr1, count, i);

			// определяем подстроку для сравнения с "эталонной"
			// начиная с символа, следующего за началом "эталонной" подстроки
			// (s_size - count + 1) - символ, следующий за последним, от которого возьмем подстроку для сравнения с "эталоном"
			// там начинается последняя подстрока (размера count) строки s (размером s_size)
			// берем подстроки только те, что лежат правее начала текущей "эталонной", 
			// так как все что левее уже сравнили как "эталон" с правой частью
			for (int j = i + 1; j < (s_size - count + 1); ++j)
			{
				// массив символов для сравнения с "эталонной"
				char arr2[count];
				s.copy(arr2, count, j);
				
				// преобразуем массивы в строки
				string str1(arr1), str2(arr2);
				// обрезаем под размер count
				str1.resize(count);
				str2.resize(count);
				// упорядочим строки
				sort(str1.begin(), str1.end());
				sort(str2.begin(), str2.end());

				// проверим строки на "равенство"
				if (str1 == str2)
					total++;
			}
		}
	}

	return total;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = sherlockAndAnagrams(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
